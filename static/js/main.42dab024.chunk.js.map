{"version":3,"sources":["ids.js","App.js","reportWebVitals.js","index.js"],"names":["web3","PublicKey","Map","App","useState","newKeypair","setNewKeypair","balances","setBalances","bicInfo","setBicInfo","signatureLog","setSignatureLog","isShowLog","setIsShowLow","setNftImg","nftCollection","testFeePayerWallet","Wallet","Keypair","fromSecretKey","Base58","decode","testMasterWallet","connection","Connection","user1Wallet","user2Wallet","bicSpl","Token","TOKEN_PROGRAM_ID","payer","maxValue","u64","storeAdminWallet","createBic","a","mint","generate","console","log","publicKey","toBase58","getMinimumBalanceForRentExemption","SystemProgram","fromPubkey","newAccountPubkey","space","lamports","programId","createAccount","createInitMintInstruction","instructions","tx","Transaction","add","feePayer","getRecentBlockhash","recentBlockhash","blockhash","partialSign","rawTx","serialize","sendRawTransaction","receipt","concat","alert","load","signature","confirmTransaction","status","value","Promise","all","getBalance","getOrCreateAssociatedAccountInfo","getMintInfo","mintBic","toWallet","amount","toAssociatedAddress","createMintToInstruction","address","createApproveInstruction","transferBIC","fromWallet","toAddress","fromAssociatedAddress","feePayerAssociatedAddress","createTransferInstruction","sendTransaction","skipPreflight","recoverTransfer","fromAddress","createBicAssociatedAccount","keypair","getAssociatedTokenAddress","associatedProgramId","bicAssociatedPublicKey","getAccountInfo","accountInfo","owner","createAssociatedTokenAccountInstruction","getTransaction","commitment","txInfo","fromCombined","transactions","options","combinedTransaction","forEach","transaction","instruction","prepareTokenAccountAndMintTxs","mintRent","createMintTx","programs","CreateMint","freezeAuthority","ASSOCIATED_TOKEN_PROGRAM_ID","recipient","createAssociatedTokenAccountTx","CreateAssociatedTokenAccount","associatedTokenAddress","splTokenMintAddress","walletAddress","mintToTx","MintTo","dest","authority","createNFT","uri","wallet","maxSupply","Metadata","getPDA","metadataPDA","MasterEdition","editionPDA","utils","metadata","lookup","name","symbol","seller_fee_basis_points","creators","properties","creatorsData","reduce","memo","share","verified","toString","creator","Creator","metadataData","MetadataDataData","sellerFeeBasisPoints","createMetadataTx","CreateMetadata","updateAuthority","mintAuthority","masterEditionTx","CreateMasterEdition","edition","BN","finalTx","txId","createAuctionManager","nftInfo","WinnerLimit","type","WinnerLimitType","Capped","usize","PriceFloor","PriceFloorType","Minimum","minPrice","Vault","MAX_EXTERNAL_ACCOUNT_SIZE","epaRentExempt","externalPriceAccount","externalPriceAccountData","ExternalPriceAccountData","pricePerShare","priceMint","NATIVE_MINT","allowedToCombine","uninitializedEPA","VaultProgram","PUBKEY","updateEPA","UpdateExternalPriceAccount","externalPriceAccountTx","externalPriceAccountTxResult","AccountLayout","span","accountRent","MintLayout","MAX_VAULT_SIZE","vaultRent","vault","vaultAuthority","fractionMint","fractionMintTx","redeemTreasury","redeemTreasuryTx","CreateTokenAccount","fractionTreasury","fractionTreasuryTx","uninitializedVaultTx","initVaultTx","InitVault","fractionalTreasury","pricingLookupAddress","fractionalMint","allowFurtherShareCreation","createVaultTx","createVaultTxResult","className","onClick","secretKey","encode","isOpen","map","e","href","target","decimals","supply","md","Math","pow","onChange","event","files","index","data","indexInner","info","isMutable","key","primarySaleHappened","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42dab024.chunk.js","sourcesContent":["import { web3 } from '@project-serum/anchor';\n\nexport const WRAPPED_SOL_MINT = new web3.PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n\nexport const TOKEN_PROGRAM_ID = new web3.PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new web3.PublicKey(\n  'BPFLoaderUpgradeab1e11111111111111111111111',\n);\n\nexport const MEMO_ID = new web3.PublicKey(\n  'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',\n);\n\nexport const METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nexport const VAULT_ID = new web3.PublicKey(\n  'vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn'\n);\n\nexport const AUCTION_ID =  new web3.PublicKey(\n  'auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8'\n);\n\nexport const METAPLEX_ID = new web3.PublicKey(\n  'p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98'\n);\n\nexport const PACK_CREATE_ID = new web3.PublicKey(\n  'packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu',\n);\n\nexport const ORACLE_ID = new web3.PublicKey(\n  'rndshKFf48HhGaPbaCd3WQYtgCNKzRgVQ3U2we4Cvf9',\n);\n\nexport const SYSTEM = new web3.PublicKey('11111111111111111111111111111111');\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    pack_create: PACK_CREATE_ID,\n    oracle: ORACLE_ID,\n  };\n};\nconst PubKeysInternedMap = new Map();\n\nexport const toPublicKey = (key) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new web3.PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n","import {useEffect, useState} from 'react';\nimport {Col, Row, Label, Button, Collapse, Card, CardBody, CardText, CardTitle, CardLink, Input} from 'reactstrap';\nimport {web3, Wallet, Provider, BN} from '@project-serum/anchor';\nimport Base58 from 'base-58';\nimport { TOKEN_PROGRAM_ID, Token, u64, ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, AccountLayout, MintLayout } from \"@solana/spl-token\";\nimport {\n    Keypair,\n    PublicKey,\n    SystemProgram,\n} from '@solana/web3.js';\nimport { actions, NodeWallet, utils, programs } from '@metaplex/js';\nimport {programIds, WRAPPED_SOL_MINT, toPublicKey} from './ids';\nimport {awsUpload} from \"./helper/aws\";\nimport exampleContent from './assets/0.json';\nimport {\n    Metadata,\n    MetadataKey,\n    MasterEdition,\n    Creator,\n    MetadataDataData,\n    CreateMetadata, CreateMasterEdition,\n\n} from '@metaplex-foundation/mpl-token-metadata';\nimport {\n    CreateAuction,\n    CreateAuctionArgs,\n    PriceFloor,\n    PriceFloorType,\n    WinnerLimit,\n    WinnerLimitType,\n    Auction,\n    AuctionExtended\n} from \"@metaplex-foundation/mpl-auction\";\n\nimport {\n    ExternalPriceAccountData,\n    Vault,\n    VaultProgram,\n    UpdateExternalPriceAccount, InitVault, InitVaultArgs,\n    AddTokenToInactiveVault\n} from '@metaplex-foundation/mpl-token-vault';\nimport {Transaction} from \"@metaplex-foundation/mpl-core\";\n\nfunction App() {\n    // State\n    const testFeePayerSecretKey = 'EGeG7Q6j8DedNW1ayFJW6a1eqUYCVobJ3CkKMxGPUb3vZLfHJhYDy2YrY8bwrNy2kZvqRPduFn8KXUUxJtqEPB3'\n    const testMasterSecretKey = '5rfnMoHXULH1fvcvdeBNwNLCJjDrNjd5UoqQZiNxzxJ1DFXTAWj8HRJNzxh4kaoeSnjZvaGZ8yLYAvuX7W1SEfxQ'\n    const [newKeypair, setNewKeypair] = useState({})\n    const [balances, setBalances] = useState([0,0,0,0])\n    const [bicInfo, setBicInfo] = useState({})\n    const [signatureLog, setSignatureLog] = useState([]);\n    const [isShowLog, setIsShowLow] = useState(false);\n    const [nftImg, setNftImg] = useState(null)\n\n    const [nftCollection, setnftCollection] = useState([]);\n    const [auctionNFT, setAuctionNFT] = useState('')\n\n    // 3rpycwRea4yGvcE5inQNX1eut4wEpeVCZohkEiBXY3PB\n    const testFeePayerWallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode(testFeePayerSecretKey)))\n    // 8HZtsjLbS5dim8ULfVv83XQ6xp4oMph2FpzmsLbg2aC4\n    const testMasterWallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode(testMasterSecretKey)))\n    // const connection = new web3.Connection(\"http://127.0.0.1:8899/\") //local net\n    const connection = new web3.Connection(\"https://api.devnet.solana.com/\") // dev net\n\n    // 2B8SUxUHwUMCaGBR564L5KLDGJ7SyjbZDzXZifbvrhdv\n    const user1Wallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode('4EHnNBG9jfvU2RE5bgXd9Fzn6bbKTnDdvVeQmJScpLTFyMyAy7QcLdnLuxEz7fqJLbHdZg6pZggGmumPX8hbA5Qg')))\n    // 6qbhYEGCMihaQiRt66oTMDgvCm2VY23vJsETGN6rs8z1\n    const user2Wallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode('4TQEhMh7ujM8yoEKxEv6d5dWciCPhErAMP2FuLS2xTX9B3VrwZUDJVubVVby46yQGkcmWD2vvcv7pyrQDJxu96yb')))\n    const bicSpl = new Token(connection, new web3.PublicKey('TVS2vUYedu5SPHzanWVKWmoQKGbwPeuT3QB9JBpCrLm'), TOKEN_PROGRAM_ID, testFeePayerWallet.payer)\n\n    const maxValue = new u64(\"18446744073709551615\")\n\n    //5qhYVwGSYK6Thc4VQkoa5yZD9tVBaG1GuXarrARqNe4W\n    // const storeAdminSecretKey = '1nWWVwhKB3PTMmKAf7rJm3rkEH4FL5EeVJ89HeiYtAgQEgQb1oT7v3YPsfVPjxdJi5PtRJPKKwDHA19ffF9DCkW';\n    const storeAdminSecretKey = 'wbeBnLnYPW5ThW96HWVRqomr98zdkUUFTh2goec25xCNAGFAhHzmHxBguTtCM4sFvdDEABVdxgVVbvt8Yz3F7KG';\n    const storeAdminWallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode(storeAdminSecretKey)));\n\n    async function fetchNftData() {\n        const metadata = await Metadata.findMany(connection, {\n            creators: [storeAdminWallet.publicKey],\n        });\n        console.log('metadata: ', metadata)\n        setnftCollection(metadata);\n    }\n\n    // Logic function\n    const createBic = async () => {\n        const mint = web3.Keypair.generate();\n        console.log('mint: ', mint.publicKey.toBase58())\n        console.log('lamport: ', await connection.getMinimumBalanceForRentExemption(82))\n        const instructions = [\n            web3.SystemProgram.createAccount({\n                fromPubkey: testFeePayerWallet.publicKey,\n                newAccountPubkey: mint.publicKey,\n                space: 82,\n                lamports: await connection.getMinimumBalanceForRentExemption(82),\n                programId: TOKEN_PROGRAM_ID,\n            }),\n            Token.createInitMintInstruction(\n                TOKEN_PROGRAM_ID,\n                mint.publicKey,\n                0,\n                testMasterWallet.publicKey,\n                null\n            ),\n        ];\n        let tx = new web3.Transaction().add(...instructions)\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n        console.log('testFeePayerWallet.payer.publicKey: ', testFeePayerWallet.payer.publicKey.toBase58())\n\n        // tx.feePayer = testMasterWallet.payer.publicKey\n        console.log('testMasterWallet.payer.publicKey: ', testMasterWallet.payer.publicKey.toBase58())\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n\n        tx.partialSign(testFeePayerWallet.payer)\n        // tx.partialSign(testMasterWallet.payer)\n\n        tx.partialSign(mint)\n\n        console.log('tx: ', tx)\n        // const rec = await testFeePayerKeyProvider.send(tx)\n        // console.log('rec: ', rec)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        // const status = (await connection.confirmTransaction(receipt)).value;\n        // console.log('status: ', status)\n        // const txInfo = await connection.getTransaction(receipt, {commitment: \"confirmed\"})\n        // console.log('txInfo: ', txInfo)\n        alert(`create bic success bic address: ${mint.publicKey.toBase58()}`)\n        // const txResult = await testFeePayerKeyProvider.send(tx)\n        // console.log('txResult: ', txResult)\n\n    }\n\n    const load = async (signature) => {\n        if(signature) {\n            const status = (await connection.confirmTransaction(signature)).value;\n            console.log('status: ', status)\n        }\n        setBalances(await Promise.all([\n            connection.getBalance(user1Wallet.publicKey),\n            connection.getBalance(user2Wallet.publicKey),\n            connection.getBalance(testFeePayerWallet.publicKey),\n            connection.getBalance(testMasterWallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(user1Wallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(user2Wallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(testFeePayerWallet.publicKey),\n        ]))\n        setBicInfo(await bicSpl.getMintInfo())\n        // fetchNftData()\n    }\n\n    const mintBic = async (toWallet, amount) => {\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toWallet.publicKey)\n        // const masterAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(testMasterWallet.publicKey)\n        // Simple mint approve\n        // await bicSpl.mintTo(toAssociatedAddress.address, testMasterWallet.publicKey, [testMasterWallet.payer], amount)\n        // await bicSpl.approve(toAssociatedAddress.address, masterAssociatedAddress.address, toWallet.publicKey, [toWallet.payer], maxValue)\n\n        // Mint and approve at once\n        const instructions = [\n            Token.createMintToInstruction(\n                bicSpl.programId,\n                bicSpl.publicKey,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                [],\n                amount\n            ),\n            Token.createApproveInstruction(\n                bicSpl.programId,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                toWallet.publicKey,\n                [],\n                maxValue\n            ),\n        ];\n\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(testMasterWallet.payer)\n        tx.partialSign(toWallet.payer)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        await load(receipt)\n    }\n\n    const transferBIC = async (fromWallet, toAddress, amount) => {\n        const fromAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(fromWallet.publicKey)\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toAddress)\n        const feePayerAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(testFeePayerWallet.publicKey)\n        // Simple transfer\n        // await bicSpl.transfer(fromAssociatedAddress.address, toAssociatedAddress.address, fromWallet.publicKey, [], amount)\n\n        // Transfer BIC to fee payer for cost\n        const instructions = [\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                toAssociatedAddress.address,\n                fromWallet.publicKey,\n                [],\n                amount\n            ),\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                feePayerAssociatedAddress.address,\n                fromWallet.publicKey,\n                [],\n                1\n            ),\n\n        ];\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(fromWallet.payer)\n        console.log('tx: ', tx)\n\n        const receipt = await connection.sendTransaction(tx, [fromWallet.payer, testFeePayerWallet.payer], {skipPreflight: false})\n        setSignatureLog(signatureLog.concat(receipt))\n        console.log('receipt: ', receipt)\n        await load(receipt)\n    }\n\n    const recoverTransfer = async (fromAddress, toAddress, amount) => {\n        const fromAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(fromAddress)\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toAddress)\n        // await bicSpl.transfer(fromAssociatedAddress.address, toAssociatedAddress.address, user1Wallet.publicKey, [testMasterWallet.payer], amount)\n        // const info = await bicSpl.getAccountInfo(fromAssociatedAddress.address)\n        // console.log('info: ', info)\n        // console.log('info: ', info.delegate.toBase58())\n        // console.log('info: ', info.delegatedAmount.toString())\n\n        // create with instructions\n        const instructions = [\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                [testMasterWallet.payer],\n                amount\n            )\n        ]\n\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(testMasterWallet.payer)\n        console.log('tx: ', tx)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        await load(receipt)\n\n    }\n\n    const createBicAssociatedAccount = async (keypair) => {\n        const bicAssociatedPublicKey = await Token.getAssociatedTokenAddress(\n            bicSpl.associatedProgramId,\n            bicSpl.programId,\n            bicSpl.publicKey,\n            keypair.publicKey\n            // new web3.PublicKey(\"2B8SUxUHwUMCaGBR564L5KLDGJ7SyjbZDzXZifbvrhdv\")\n        )\n        console.log('bicAssociatedPublicKey: ', bicAssociatedPublicKey.toBase58())\n\n        const accountInfo = await connection.getAccountInfo(bicAssociatedPublicKey)\n        console.log('accountInfo: ', accountInfo)\n        if(accountInfo && accountInfo.owner) {\n            // alert(`Cannot create account because it own by ${accountInfo.owner.toBase58()}`)\n        } else {\n            const tx = new web3.Transaction().add(Token.createAssociatedTokenAccountInstruction(\n                bicSpl.associatedProgramId,\n                bicSpl.programId,\n                bicSpl.publicKey,\n                bicAssociatedPublicKey,\n                keypair.publicKey,\n                testFeePayerWallet.publicKey\n            ))\n            tx.feePayer = testFeePayerWallet.payer.publicKey\n            tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n            tx.partialSign(testFeePayerWallet.payer)\n            console.log('tx: ', tx)\n\n            const rawTx = tx.serialize()\n\n            const receipt = await connection.sendRawTransaction(rawTx)\n            console.log('receipt: ', receipt)\n\n            setSignatureLog(signatureLog.concat(receipt))\n            // alert(`Create account ${bicAssociatedPublicKey.toBase58()}`)\n\n            const status = (await connection.confirmTransaction(receipt)).value;\n            console.log('status: ', status)\n            const txInfo = await connection.getTransaction(receipt, {commitment: \"confirmed\"})\n            console.log('txInfo: ', txInfo)\n\n\n        }\n\n        // const closeAccountTx = new web3.Transaction().add(Token.createCloseAccountInstruction(\n        //     bicSpl.programId,\n        //     bicAssociatedPublicKey,\n        //     testMasterWallet.publicKey,\n        //     keypair.publicKey,\n        //     []\n        // ))\n        // closeAccountTx.feePayer = testFeePayerWallet.payer.publicKey\n        // closeAccountTx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        // closeAccountTx.partialSign(testFeePayerWallet.payer)\n        // closeAccountTx.partialSign(keypair)\n        // console.log('closeAccountTx: ', closeAccountTx)\n        //\n        // const rawCloseAccountTx = closeAccountTx.serialize()\n        //\n        // const receiptCloseAccountTx = await connection.sendRawTransaction(rawCloseAccountTx)\n        // console.log('receiptCloseAccountTx: ', receiptCloseAccountTx)\n        // setSignatureLog(signatureLog.concat(receiptCloseAccountTx))\n\n    }\n\n    function fromCombined(transactions, options = {}) {\n        const combinedTransaction = new web3.Transaction(options);\n        transactions.forEach((transaction) => transaction.instructions.forEach((instruction) => {\n            combinedTransaction.add(instruction);\n        }));\n        return combinedTransaction;\n    }\n\n    async function prepareTokenAccountAndMintTxs(\n        connection,\n        owner,\n    ) {\n        const mint = web3.Keypair.generate();\n        const mintRent = await connection.getMinimumBalanceForRentExemption(82);\n        const createMintTx = new programs.CreateMint(\n            { feePayer: testFeePayerWallet.publicKey },\n            {\n                newAccountPubkey: mint.publicKey,\n                lamports: mintRent,\n                owner: owner,\n                freezeAuthority: owner\n            },\n        );\n\n        const recipient = await Token.getAssociatedTokenAddress(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            owner,\n        );\n\n        const createAssociatedTokenAccountTx = new programs.CreateAssociatedTokenAccount(\n            { feePayer: testFeePayerWallet.publicKey },\n            {\n                associatedTokenAddress: recipient,\n                splTokenMintAddress: mint.publicKey,\n                walletAddress: owner\n            },\n        );\n\n        const mintToTx = new programs.MintTo(\n            { feePayer: testFeePayerWallet.publicKey },\n            {\n                mint: mint.publicKey,\n                dest: recipient,\n                amount: 1,\n                authority: owner\n            },\n        );\n\n        return { mint, createMintTx, createAssociatedTokenAccountTx, mintToTx, recipient };\n    }\n\n\n    const createNFT = async () => {\n        const uri = \"https://aecwobcvprkxm2kgewrjduk5jd5uqzywxcmru6z6wms2tifhxwkq.arweave.net/AQVnBFV8VXZpRiWikdFdSPtIZxa4mRp7PrMlqaCnvZU/\"\n        const wallet = storeAdminWallet;\n        const maxSupply = 5\n\n        const { mint, createMintTx, createAssociatedTokenAccountTx, mintToTx } =\n            await prepareTokenAccountAndMintTxs(connection, wallet.publicKey);\n\n        const metadataPDA = await Metadata.getPDA(mint.publicKey);\n        const editionPDA = await MasterEdition.getPDA(mint.publicKey);\n\n        const {\n            name,\n            symbol,\n            seller_fee_basis_points,\n            properties: { creators },\n        } = await utils.metadata.lookup(uri);\n\n        const creatorsData = creators.reduce((memo, { address, share }) => {\n            const verified = address === wallet.publicKey.toString();\n\n            const creator = new Creator({\n                address,\n                share,\n                verified,\n            });\n\n            memo = [...memo, creator];\n\n            return memo;\n        }, []);\n\n        const metadataData = new MetadataDataData({\n            name,\n            symbol,\n            uri,\n            sellerFeeBasisPoints: seller_fee_basis_points,\n            creators: creatorsData,\n        });\n\n        const createMetadataTx = new CreateMetadata(\n            {\n                feePayer: testFeePayerWallet.publicKey,\n            },\n            {\n                metadata: metadataPDA,\n                metadataData,\n                updateAuthority: wallet.publicKey,\n                mint: mint.publicKey,\n                mintAuthority: wallet.publicKey,\n            },\n        );\n\n        const masterEditionTx = new CreateMasterEdition(\n            { feePayer: testFeePayerWallet.publicKey },\n            {\n                edition: editionPDA,\n                metadata: metadataPDA,\n                updateAuthority: wallet.publicKey,\n                mint: mint.publicKey,\n                mintAuthority: wallet.publicKey,\n                maxSupply: maxSupply ? new BN(maxSupply) : null,\n            },\n        );\n\n        const finalTx = fromCombined([\n            createMintTx,\n            createMetadataTx,\n            createAssociatedTokenAccountTx,\n            mintToTx,\n            masterEditionTx,\n        ], { feePayer: testFeePayerWallet.publicKey })\n        finalTx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n\n        finalTx.partialSign(mint)\n        finalTx.partialSign(testFeePayerWallet.payer)\n        finalTx.partialSign(wallet.payer)\n        const txId = await connection.sendRawTransaction(finalTx.serialize())\n        // const txId = await actions.sendTransaction({\n        //     connection,\n        //     signers: [mint, testFeePayerWallet.payer],\n        //     txs: [\n        //         createMintTx,\n        //         createMetadataTx,\n        //         createAssociatedTokenAccountTx,\n        //         mintToTx,\n        //         masterEditionTx,\n        //     ],\n        //     wallet,\n        // });\n        console.log('txId: ', txId)\n        return {\n            txId,\n            mint: mint.publicKey,\n            metadata: metadataPDA,\n            edition: editionPDA,\n        };\n\n    }\n\n    const createAuctionManager = async (nftInfo) => {\n\n        // // auction\n        // const auctionSettings = {\n        //     auctionGap: new BN('0a8c', 16),\n        //     endAuctionAt: new BN('2a30', 16),\n        //     gapTickSizePercentage: 36,\n        //     instantSalePrice: null,\n        //     name: null,\n        //     priceFloor: new PriceFloor({\n        //         type: PriceFloorType.Minimum,\n        //         minPrice: new BN(12),\n        //     }),\n        //     tickSize: new BN(\"028fa6ae00\",16),\n        //     tokenMint: \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\",\n        //     winners: new WinnerLimit({\n        //         type: WinnerLimitType.Unlimited,\n        //         usize: new BN(0),\n        //\n        //     }),\n        // }\n\n        // auction\n        const auctionSettings = {\n            \"winners\": new WinnerLimit({\n                type: WinnerLimitType.Capped,\n                usize: new BN(1)\n            }),\n            // \"winners\": {\"type\": 1, \"usize\": new BN(\"01\", 16)},\n            \"endAuctionAt\": null,\n            \"auctionGap\": null,\n            \"priceFloor\": new PriceFloor({\n                        type: PriceFloorType.Minimum,\n                        minPrice: new BN(12),\n                    }),\n            \"tokenMint\": \"So11111111111111111111111111111111111111112\",\n            \"gapTickSizePercentage\": null,\n            \"tickSize\": null,\n            \"instantSalePrice\": new BN(\"02cb417800\", 16),\n            \"name\": null\n        }\n\n        // Create external account price\n\n        const epaRentExempt = await connection.getMinimumBalanceForRentExemption(\n            Vault.MAX_EXTERNAL_ACCOUNT_SIZE,\n        );\n\n        const externalPriceAccount = web3.Keypair.generate();\n\n        const externalPriceAccountData = new ExternalPriceAccountData({\n            pricePerShare: new BN(0),\n            priceMint: NATIVE_MINT.toBase58(),\n            allowedToCombine: true,\n        });\n\n        const uninitializedEPA = new Transaction().add(\n            SystemProgram.createAccount({\n                fromPubkey: storeAdminWallet.publicKey,\n                newAccountPubkey: externalPriceAccount.publicKey,\n                lamports: epaRentExempt,\n                space: Vault.MAX_EXTERNAL_ACCOUNT_SIZE,\n                programId: VaultProgram.PUBKEY,\n            }),\n        );\n\n        const updateEPA = new UpdateExternalPriceAccount({ feePayer: storeAdminWallet.publicKey }, {\n            externalPriceAccount: externalPriceAccount.publicKey,\n            externalPriceAccountData,\n        });\n\n        const externalPriceAccountTx = fromCombined([uninitializedEPA, updateEPA], { feePayer: storeAdminWallet.publicKey })\n        externalPriceAccountTx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n\n        externalPriceAccountTx.partialSign(externalPriceAccount)\n        externalPriceAccountTx.partialSign(storeAdminWallet.payer)\n        const externalPriceAccountTxResult = await connection.sendRawTransaction(externalPriceAccountTx.serialize())\n\n        console.log('externalPriceAccountTxResult: ', externalPriceAccountTxResult)\n\n\n        let status = (await connection.confirmTransaction(externalPriceAccountTxResult)).value;\n        console.log('status: ', status)\n        let txInfo = await connection.getTransaction(externalPriceAccountTxResult, {commitment: \"confirmed\"})\n        console.log('txInfo externalPriceAccountTxResult: ', txInfo)\n\n        // Create vault\n\n        const accountRent = await connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n\n        const mintRent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n\n        const vaultRent = await connection.getMinimumBalanceForRentExemption(Vault.MAX_VAULT_SIZE);\n\n\n        const vault = Keypair.generate();\n\n        const vaultAuthority = await Vault.getPDA(vault.publicKey);\n\n\n        const fractionMint = Keypair.generate();\n        const fractionMintTx = new programs.CreateMint(\n            { feePayer: storeAdminWallet.publicKey },\n            {\n                newAccountPubkey: fractionMint.publicKey,\n                lamports: mintRent,\n                owner: vaultAuthority,\n                freezeAuthority: vaultAuthority,\n            },\n        );\n\n\n        const redeemTreasury = Keypair.generate();\n        const redeemTreasuryTx = new programs.CreateTokenAccount(\n            { feePayer: storeAdminWallet.publicKey },\n            {\n                newAccountPubkey: redeemTreasury.publicKey,\n                lamports: accountRent,\n                mint: NATIVE_MINT.toBase58(),\n                owner: vaultAuthority,\n            },\n        );\n\n\n        const fractionTreasury = Keypair.generate();\n        const fractionTreasuryTx = new programs.CreateTokenAccount(\n            { feePayer: storeAdminWallet.publicKey },\n            {\n                newAccountPubkey: fractionTreasury.publicKey,\n                lamports: accountRent,\n                mint: fractionMint.publicKey,\n                owner: vaultAuthority,\n            },\n        );\n\n\n        const uninitializedVaultTx = new Transaction().add(\n            SystemProgram.createAccount({\n                fromPubkey: storeAdminWallet.publicKey,\n                newAccountPubkey: vault.publicKey,\n                lamports: vaultRent,\n                space: Vault.MAX_VAULT_SIZE,\n                programId: VaultProgram.PUBKEY,\n            }),\n        );\n\n        const initVaultTx = new InitVault(\n            { feePayer: storeAdminWallet.publicKey },\n            {\n                vault: vault.publicKey,\n                vaultAuthority: storeAdminWallet.publicKey,\n                fractionalTreasury: fractionTreasury.publicKey,\n                pricingLookupAddress: externalPriceAccount.publicKey,\n                redeemTreasury: redeemTreasury.publicKey,\n                fractionalMint: fractionMint.publicKey,\n                allowFurtherShareCreation: true,\n            },\n        );\n\n        const createVaultTx = fromCombined([\n            fractionMintTx,\n            redeemTreasuryTx,\n            fractionTreasuryTx,\n            uninitializedVaultTx,\n            initVaultTx\n        ],{ feePayer: storeAdminWallet.publicKey })\n\n        createVaultTx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n\n        createVaultTx.partialSign(storeAdminWallet.payer)\n        createVaultTx.partialSign(fractionMint)\n        createVaultTx.partialSign(redeemTreasury)\n        createVaultTx.partialSign(fractionTreasury)\n        createVaultTx.partialSign(vault)\n\n        const createVaultTxResult = await connection.sendRawTransaction(createVaultTx.serialize())\n\n        console.log('createVaultTxResult: ', createVaultTxResult)\n\n        status = (await connection.confirmTransaction(createVaultTxResult)).value;\n        console.log('status: ', status)\n        txInfo = await connection.getTransaction(createVaultTxResult, {commitment: \"confirmed\"})\n        console.log('txInfo createVaultTxResult: ', txInfo)\n\n        // // Add token to vault\n        // // // Create deposit box\n        //\n        // const addTokenToInactiveVaultTx = new AddTokenToInactiveVault(\n        //     { feePayer: storeAdminWallet.publicKey },\n        //     {\n        //         vault: vault.publicKey,\n        //         vaultAuthority: storeAdminWallet.publicKey,\n        //         tokenAccount: nft.box.tokenAccount,\n        //         tokenStoreAccount: PublicKey,\n        //         transferAuthority: PublicKey,\n        //         safetyDepositBox: PublicKey,\n        //         amount: BN,\n        //     }\n        // )\n\n        // Active vault\n\n\n        // // Create auction\n        // const auctionKey = await Auction.getPDA(vault.publicKey)\n        // const auctionExtendedKey = await AuctionExtended.getPDA(vault.publicKey)\n        //\n        // const fullSettings = new CreateAuctionArgs({\n        //     ...auctionSettings,\n        //     authority: storeAdminWallet.publicKey.toBase58(),\n        //     resource: vault.publicKey.toBase58(),\n        // });\n        //\n        // const createAuctionTx = new CreateAuction({ feePayer: storeAdminWallet.publicKey },{\n        //     auction: auctionKey,\n        //     auctionExtended: auctionExtendedKey,\n        //     creator: storeAdminWallet.publicKey,\n        //     args: fullSettings\n        // })\n        // createAuctionTx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n        //\n        // createAuctionTx.partialSign(storeAdminWallet.payer)\n        //\n        // const createAuctionTxResult = await connection.sendRawTransaction(createAuctionTx.serialize())\n        //\n        // console.log('createAuctionTxResult: ', createAuctionTxResult)\n        //\n        // status = (await connection.confirmTransaction(createAuctionTxResult)).value;\n        // console.log('status: ', status)\n        // txInfo = await connection.getTransaction(createAuctionTxResult, {commitment: \"confirmed\"})\n        // console.log('txInfo createAuctionTxResult: ', txInfo)\n    }\n\n    return (\n        <div className=\"App\">\n            <Row>\n                <Col>\n                    <Label>Generate keypair</Label>\n                    <br/>\n                    <Button onClick={() => {\n                        setNewKeypair(web3.Keypair.generate())\n                    }}>Generate</Button>\n                    {newKeypair.publicKey && <Button onClick={() => createBicAssociatedAccount(newKeypair)}>Create BIC Associated Account</Button>}\n                </Col>\n                <Col>\n                    <h4>Secret key: {newKeypair.secretKey && Base58.encode(newKeypair.secretKey)}</h4>\n                    <h4>Public key: {newKeypair.secretKey && newKeypair.publicKey.toBase58()}</h4>\n                </Col>\n\n            </Row>\n            <Row>\n                <Label>Signature logs</Label>\n                <Button onClick={() => setIsShowLow(!isShowLog)}>Show signature logs</Button>\n                <Collapse isOpen={isShowLog}>\n                    <Card>\n                        <CardBody>\n                            {signatureLog.map(e => <CardLink href={`https://explorer.solana.com/tx/${e}?cluster=devnet`} target=\"_blank\">{e}</CardLink>)}\n                        </CardBody>\n                    </Card>\n                </Collapse>\n            </Row>\n\n            <Row>\n                <Label>Spl token</Label>\n                <Card>\n                    <Button onClick={() => createBic()}>Create BIC</Button>\n                    <Button onClick={() => load()}>Load</Button>\n                </Card>\n                <Card>\n                    <CardBody>\n                        <CardTitle>BIC</CardTitle>\n                        <CardText>ProgramId: {bicSpl.programId.toBase58()}</CardText>\n                        <CardText>Public key: {bicSpl.publicKey.toBase58()}</CardText>\n                        <CardText>Mint: {bicInfo.mintAuthority && bicInfo.mintAuthority.toBase58()}</CardText>\n                        <CardText>Decimals: {bicInfo.decimals}</CardText>\n                        <CardText>Supply: {bicInfo.supply && bicInfo.supply.toString()}</CardText>\n\n                    </CardBody>\n                </Card>\n\n                <Label>User Wallet</Label>\n\n                <Row>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>User 1</CardTitle>\n                                <CardTitle>Address: {user1Wallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[0]} nSOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[4] && balances[4].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[4] && balances[4].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => transferBIC(user1Wallet, user2Wallet.publicKey, 10)}>Transfer 10 BIC to user 2</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>User 2</CardTitle>\n                                <CardTitle>Address: {user2Wallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[1]} nSOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[5] && balances[5].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[5] && balances[5].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => transferBIC(user2Wallet, user1Wallet.publicKey, 10)}>Transfer 10 BIC to user 1</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Label>System Wallet</Label>\n                <Row>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>FeePayer wallet</CardTitle>\n                                <CardTitle>Address: {testFeePayerWallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[2]} nSOL</CardText>\n                                <CardText>{balances[2]/Math.pow(10,9)} SOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[6] && balances[6].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[6] && balances[6].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>Master (Recover) wallet</CardTitle>\n                                <CardTitle>Address: {testMasterWallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[3]} nSOL</CardText>\n                                <CardText>{balances[3]/Math.pow(10,9)} SOL</CardText>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => mintBic(user1Wallet, 1000)}>Mint 1000 BIC to user 1</Button>\n                                <Button onClick={() => mintBic(user2Wallet, 1000)}>Mint 1000 BIC to user 2</Button>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => recoverTransfer(user1Wallet.publicKey, user2Wallet.publicKey, 10)}>Transfer 10 BIC from user 1 to user 2</Button>\n                                <Button onClick={() => recoverTransfer(user2Wallet.publicKey, user1Wallet.publicKey, 10)}>Transfer 10 BIC from user 2 to user 1</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Row>\n            <Row>\n                <Label>NFT Creation</Label>\n                <Input type=\"file\" onChange={(event) => {\n                    setNftImg(event.target.files[0])\n                }}/>\n                <Button onClick={() => createNFT()}>Create NFT</Button>\n            </Row>\n            <Row>\n                <Label>NFTs of {storeAdminWallet.publicKey.toBase58()}</Label>\n                <ul>\n                    {nftCollection.map((e,index) => (\n                        <Row>\n                            <Col md={8}>\n                            <Card key={'nftCollection-data-' + index}>\n                                <Row>\n                                    <Col md={6}>\n                                        <CardText>Name: {e.data.data.name}</CardText>\n                                        <CardText>Symbol: {e.data.data.symbol}</CardText>\n                                        <CardText>SellerFeeBasisPoints: {e.data.data.sellerFeeBasisPoints}</CardText>\n                                        <CardLink href={`https://solscan.io/token/${e.data.data.uri}?cluster=devnet`} target=\"_blank\">Uri</CardLink>\n                                        <CardText>Creators: </CardText>\n                                        {e.data.data.creators.map((creator, indexInner) => <Card  key={'nftCollection-data-' + index+ '-' + indexInner}>\n                                            <CardText>{creator.address}</CardText>\n                                            <CardText>Share: {creator.share} %</CardText>\n                                            <CardText>Verified: {creator.verified}</CardText>\n                                        </Card>)}\n                                    </Col>\n                                <Col md={6}>\n                                        <CardLink href={`https://solscan.io/token/${e.data.mint}?cluster=devnet`} target=\"_blank\">{e.data.mint}</CardLink>\n                                        <CardText>Owner: {e.info.owner.toBase58()}</CardText>\n                                        <CardText>Is Mutable: {e.data.isMutable}</CardText>\n                                        <CardText>Key: {e.data.key}</CardText>\n                                        <CardText>Mint: {e.data.mint}</CardText>\n                                        <CardText>Primary Sale Happened: {e.data.primarySaleHappened}</CardText>\n                                        <CardText>Update Authority: {e.data.updateAuthority}</CardText>\n                                </Col>\n                                </Row>\n                            </Card>\n                            </Col>\n                            <Col md={4}>\n                                <Button onClick={async () => createAuctionManager(e)}>Create auction</Button>\n                            </Col>\n                        </Row>\n                    ))}\n                </ul>\n            </Row>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}