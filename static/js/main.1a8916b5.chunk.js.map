{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","newKeypair","setNewKeypair","balances","setBalances","bicInfo","setBicInfo","signatureLog","setSignatureLog","isShowLog","setIsShowLow","testFeePayerWallet","Wallet","web3","Keypair","fromSecretKey","Base58","decode","testMasterWallet","connection","Connection","user1Wallet","user2Wallet","bicSpl","Token","PublicKey","TOKEN_PROGRAM_ID","payer","maxValue","u64","createBic","a","mint","generate","console","log","publicKey","toBase58","getMinimumBalanceForRentExemption","SystemProgram","fromPubkey","newAccountPubkey","space","lamports","programId","createAccount","createInitMintInstruction","instructions","tx","Transaction","add","feePayer","getRecentBlockhash","recentBlockhash","blockhash","partialSign","rawTx","serialize","sendRawTransaction","receipt","concat","alert","load","signature","confirmTransaction","status","value","Promise","all","getBalance","getOrCreateAssociatedAccountInfo","getMintInfo","mintBic","toWallet","amount","toAssociatedAddress","createMintToInstruction","address","createApproveInstruction","transferBIC","fromWallet","toAddress","fromAssociatedAddress","feePayerAssociatedAddress","createTransferInstruction","sendTransaction","skipPreflight","recoverTransfer","fromAddress","createBicAssociatedAccount","keypair","getAssociatedTokenAddress","associatedProgramId","bicAssociatedPublicKey","getAccountInfo","accountInfo","owner","createAssociatedTokenAccountInstruction","className","onClick","secretKey","encode","isOpen","map","e","href","target","mintAuthority","decimals","supply","toString","md","Math","pow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a8916b5.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {Col, Row, Label, Button, Collapse, Card, CardBody, CardText, CardTitle, CardLink} from 'reactstrap';\nimport {web3, Wallet, Provider, BN} from '@project-serum/anchor';\nimport Base58 from 'base-58';\nimport { TOKEN_PROGRAM_ID, Token, u64 } from \"@solana/spl-token\";\n\nfunction App() {\n    // State\n    const testFeePayerSecretKey = 'EGeG7Q6j8DedNW1ayFJW6a1eqUYCVobJ3CkKMxGPUb3vZLfHJhYDy2YrY8bwrNy2kZvqRPduFn8KXUUxJtqEPB3'\n    const testMasterSecretKey = '5rfnMoHXULH1fvcvdeBNwNLCJjDrNjd5UoqQZiNxzxJ1DFXTAWj8HRJNzxh4kaoeSnjZvaGZ8yLYAvuX7W1SEfxQ'\n    const [newKeypair, setNewKeypair] = useState({})\n    const [balances, setBalances] = useState([0,0,0,0])\n    const [bicInfo, setBicInfo] = useState({})\n    const [signatureLog, setSignatureLog] = useState([]);\n    const [isShowLog, setIsShowLow] = useState(false);\n\n    // 3rpycwRea4yGvcE5inQNX1eut4wEpeVCZohkEiBXY3PB\n    const testFeePayerWallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode(testFeePayerSecretKey)))\n    // 8HZtsjLbS5dim8ULfVv83XQ6xp4oMph2FpzmsLbg2aC4\n    const testMasterWallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode(testMasterSecretKey)))\n    // const connection = new web3.Connection(\"http://127.0.0.1:8899/\") //local net\n    const connection = new web3.Connection(\"https://api.devnet.solana.com/\") // dev net\n\n    // 2B8SUxUHwUMCaGBR564L5KLDGJ7SyjbZDzXZifbvrhdv\n    const user1Wallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode('4EHnNBG9jfvU2RE5bgXd9Fzn6bbKTnDdvVeQmJScpLTFyMyAy7QcLdnLuxEz7fqJLbHdZg6pZggGmumPX8hbA5Qg')))\n    // 6qbhYEGCMihaQiRt66oTMDgvCm2VY23vJsETGN6rs8z1\n    const user2Wallet = new Wallet(web3.Keypair.fromSecretKey(Base58.decode('4TQEhMh7ujM8yoEKxEv6d5dWciCPhErAMP2FuLS2xTX9B3VrwZUDJVubVVby46yQGkcmWD2vvcv7pyrQDJxu96yb')))\n    const bicSpl = new Token(connection, new web3.PublicKey('TVS2vUYedu5SPHzanWVKWmoQKGbwPeuT3QB9JBpCrLm'), TOKEN_PROGRAM_ID, testFeePayerWallet.payer)\n\n    const maxValue = new u64(\"18446744073709551615\")\n    // Logic function\n    const createBic = async () => {\n        const mint = web3.Keypair.generate();\n        console.log('mint: ', mint.publicKey.toBase58())\n        console.log('lamport: ', await connection.getMinimumBalanceForRentExemption(82))\n        const instructions = [\n            web3.SystemProgram.createAccount({\n                fromPubkey: testFeePayerWallet.publicKey,\n                newAccountPubkey: mint.publicKey,\n                space: 82,\n                lamports: await connection.getMinimumBalanceForRentExemption(82),\n                programId: TOKEN_PROGRAM_ID,\n            }),\n            Token.createInitMintInstruction(\n                TOKEN_PROGRAM_ID,\n                mint.publicKey,\n                0,\n                testMasterWallet.publicKey,\n                null\n            ),\n        ];\n        let tx = new web3.Transaction().add(...instructions)\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n        console.log('testFeePayerWallet.payer.publicKey: ', testFeePayerWallet.payer.publicKey.toBase58())\n\n        // tx.feePayer = testMasterWallet.payer.publicKey\n        console.log('testMasterWallet.payer.publicKey: ', testMasterWallet.payer.publicKey.toBase58())\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n\n        tx.partialSign(testFeePayerWallet.payer)\n        // tx.partialSign(testMasterWallet.payer)\n\n        tx.partialSign(mint)\n\n        console.log('tx: ', tx)\n        // const rec = await testFeePayerKeyProvider.send(tx)\n        // console.log('rec: ', rec)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        // const status = (await connection.confirmTransaction(receipt)).value;\n        // console.log('status: ', status)\n        // const txInfo = await connection.getTransaction(receipt, {commitment: \"confirmed\"})\n        // console.log('txInfo: ', txInfo)\n        alert(`create bic success bic address: ${mint.publicKey.toBase58()}`)\n        // const txResult = await testFeePayerKeyProvider.send(tx)\n        // console.log('txResult: ', txResult)\n\n    }\n\n    const load = async (signature) => {\n        if(signature) {\n            const status = (await connection.confirmTransaction(signature)).value;\n            console.log('status: ', status)\n        }\n        setBalances(await Promise.all([\n            connection.getBalance(user1Wallet.publicKey),\n            connection.getBalance(user2Wallet.publicKey),\n            connection.getBalance(testFeePayerWallet.publicKey),\n            connection.getBalance(testMasterWallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(user1Wallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(user2Wallet.publicKey),\n            bicSpl.getOrCreateAssociatedAccountInfo(testFeePayerWallet.publicKey),\n        ]))\n        setBicInfo(await bicSpl.getMintInfo())\n    }\n\n    const mintBic = async (toWallet, amount) => {\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toWallet.publicKey)\n        // const masterAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(testMasterWallet.publicKey)\n        // Simple mint approve\n        // await bicSpl.mintTo(toAssociatedAddress.address, testMasterWallet.publicKey, [testMasterWallet.payer], amount)\n        // await bicSpl.approve(toAssociatedAddress.address, masterAssociatedAddress.address, toWallet.publicKey, [toWallet.payer], maxValue)\n\n        // Mint and approve at once\n        const instructions = [\n            Token.createMintToInstruction(\n                bicSpl.programId,\n                bicSpl.publicKey,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                [],\n                amount\n            ),\n            Token.createApproveInstruction(\n                bicSpl.programId,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                toWallet.publicKey,\n                [],\n                maxValue\n            ),\n        ];\n\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(testMasterWallet.payer)\n        tx.partialSign(toWallet.payer)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        await load(receipt)\n    }\n\n    const transferBIC = async (fromWallet, toAddress, amount) => {\n        const fromAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(fromWallet.publicKey)\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toAddress)\n        const feePayerAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(testFeePayerWallet.publicKey)\n        // Simple transfer\n        // await bicSpl.transfer(fromAssociatedAddress.address, toAssociatedAddress.address, fromWallet.publicKey, [], amount)\n\n        // Transfer BIC to fee payer for cost\n        const instructions = [\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                toAssociatedAddress.address,\n                fromWallet.publicKey,\n                [],\n                amount\n            ),\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                feePayerAssociatedAddress.address,\n                fromWallet.publicKey,\n                [],\n                1\n            ),\n\n        ];\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(fromWallet.payer)\n        console.log('tx: ', tx)\n\n        const receipt = await connection.sendTransaction(tx, [fromWallet.payer, testFeePayerWallet.payer], {skipPreflight: false})\n        setSignatureLog(signatureLog.concat(receipt))\n        console.log('receipt: ', receipt)\n        await load(receipt)\n    }\n\n    const recoverTransfer = async (fromAddress, toAddress, amount) => {\n        const fromAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(fromAddress)\n        const toAssociatedAddress = await bicSpl.getOrCreateAssociatedAccountInfo(toAddress)\n        // await bicSpl.transfer(fromAssociatedAddress.address, toAssociatedAddress.address, user1Wallet.publicKey, [testMasterWallet.payer], amount)\n        // const info = await bicSpl.getAccountInfo(fromAssociatedAddress.address)\n        // console.log('info: ', info)\n        // console.log('info: ', info.delegate.toBase58())\n        // console.log('info: ', info.delegatedAmount.toString())\n\n        // create with instructions\n        const instructions = [\n            Token.createTransferInstruction(\n                bicSpl.programId,\n                fromAssociatedAddress.address,\n                toAssociatedAddress.address,\n                testMasterWallet.publicKey,\n                [testMasterWallet.payer],\n                amount\n            )\n        ]\n\n        let tx = new web3.Transaction().add(...instructions)\n\n        tx.feePayer = testFeePayerWallet.payer.publicKey\n\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n        tx.partialSign(testFeePayerWallet.payer)\n        tx.partialSign(testMasterWallet.payer)\n        console.log('tx: ', tx)\n        const rawTx = tx.serialize()\n\n        console.log('rawTx: ', rawTx)\n        const receipt = await connection.sendRawTransaction(rawTx)\n        console.log('receipt: ', receipt)\n        setSignatureLog(signatureLog.concat(receipt))\n        await load(receipt)\n\n    }\n\n    const createBicAssociatedAccount = async (keypair) => {\n        const bicAssociatedPublicKey = await Token.getAssociatedTokenAddress(\n            bicSpl.associatedProgramId,\n            bicSpl.programId,\n            bicSpl.publicKey,\n            keypair.publicKey\n            // new web3.PublicKey(\"2B8SUxUHwUMCaGBR564L5KLDGJ7SyjbZDzXZifbvrhdv\")\n        )\n        console.log('bicAssociatedPublicKey: ', bicAssociatedPublicKey.toBase58())\n\n        const accountInfo = await connection.getAccountInfo(bicAssociatedPublicKey)\n        console.log('accountInfo: ', accountInfo)\n        if(accountInfo && accountInfo.owner) {\n            alert(`Cannot create account because it own by ${accountInfo.owner.toBase58()}`)\n        } else {\n            const tx = new web3.Transaction().add(Token.createAssociatedTokenAccountInstruction(\n                bicSpl.associatedProgramId,\n                bicSpl.programId,\n                bicSpl.publicKey,\n                bicAssociatedPublicKey,\n                keypair.publicKey,\n                testFeePayerWallet.publicKey\n            ))\n            tx.feePayer = testFeePayerWallet.payer.publicKey\n            tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n            tx.partialSign(testFeePayerWallet.payer)\n            console.log('tx: ', tx)\n\n            const rawTx = tx.serialize()\n\n            const receipt = await connection.sendRawTransaction(rawTx)\n            console.log('receipt: ', receipt)\n\n            setSignatureLog(signatureLog.concat(receipt))\n            alert(`Create account ${bicAssociatedPublicKey.toBase58()}`)\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <Row>\n                <Col>\n                    <Label>Generate keypair</Label>\n                    <br/>\n                    <Button onClick={() => {\n                        setNewKeypair(web3.Keypair.generate())\n                    }}>Generate</Button>\n                    {newKeypair.publicKey && <Button onClick={() => createBicAssociatedAccount(newKeypair)}>Create BIC Associated Account</Button>}\n                </Col>\n                <Col>\n                    <h4>Secret key: {newKeypair.secretKey && Base58.encode(newKeypair.secretKey)}</h4>\n                    <h4>Public key: {newKeypair.secretKey && newKeypair.publicKey.toBase58()}</h4>\n                </Col>\n\n            </Row>\n            <Row>\n                <Label>Signature logs</Label>\n                <Button onClick={() => setIsShowLow(!isShowLog)}>Show signature logs</Button>\n                <Collapse isOpen={isShowLog}>\n                    <Card>\n                        <CardBody>\n                            {signatureLog.map(e => <CardLink href={`https://explorer.solana.com/tx/${e}?cluster=devnet`} target=\"_blank\">{e}</CardLink>)}\n                        </CardBody>\n                    </Card>\n                </Collapse>\n            </Row>\n\n            <Row>\n                <Label>Spl token</Label>\n                <Card>\n                    <Button onClick={() => createBic()}>Create BIC</Button>\n                    <Button onClick={() => load()}>Load</Button>\n                </Card>\n                <Card>\n                    <CardBody>\n                        <CardTitle>BIC</CardTitle>\n                        <CardText>ProgramId: {bicSpl.programId.toBase58()}</CardText>\n                        <CardText>Public key: {bicSpl.publicKey.toBase58()}</CardText>\n                        <CardText>Mint: {bicInfo.mintAuthority && bicInfo.mintAuthority.toBase58()}</CardText>\n                        <CardText>Decimals: {bicInfo.decimals}</CardText>\n                        <CardText>Supply: {bicInfo.supply && bicInfo.supply.toString()}</CardText>\n\n                    </CardBody>\n                </Card>\n\n                <Label>User Wallet</Label>\n\n                <Row>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>User 1</CardTitle>\n                                <CardTitle>Address: {user1Wallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[0]} nSOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[4] && balances[4].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[4] && balances[4].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => transferBIC(user1Wallet, user2Wallet.publicKey, 10)}>Transfer 10 BIC to user 2</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>User 2</CardTitle>\n                                <CardTitle>Address: {user2Wallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[1]} nSOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[5] && balances[5].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[5] && balances[5].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => transferBIC(user2Wallet, user1Wallet.publicKey, 10)}>Transfer 10 BIC to user 1</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Label>System Wallet</Label>\n                <Row>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>FeePayer wallet</CardTitle>\n                                <CardTitle>Address: {testFeePayerWallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[2]} nSOL</CardText>\n                                <CardText>{balances[2]/Math.pow(10,9)} SOL</CardText>\n                                <CardTitle>BIC Associated Address: {balances[6] && balances[6].address.toBase58()}</CardTitle>\n                                <CardTitle>BIC balance: {balances[6] && balances[6].amount.toString()} BIC</CardTitle>\n                            </CardBody>\n                            <CardBody>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle>Master (Recover) wallet</CardTitle>\n                                <CardTitle>Address: {testMasterWallet.publicKey.toBase58()}</CardTitle>\n                                <CardText>Balances: {balances[3]} nSOL</CardText>\n                                <CardText>{balances[3]/Math.pow(10,9)} SOL</CardText>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => mintBic(user1Wallet, 1000)}>Mint 1000 BIC to user 1</Button>\n                                <Button onClick={() => mintBic(user2Wallet, 1000)}>Mint 1000 BIC to user 2</Button>\n                            </CardBody>\n                            <CardBody>\n                                <Button onClick={() => recoverTransfer(user1Wallet.publicKey, user2Wallet.publicKey, 10)}>Transfer 10 BIC from user 1 to user 2</Button>\n                                <Button onClick={() => recoverTransfer(user2Wallet.publicKey, user1Wallet.publicKey, 10)}>Transfer 10 BIC from user 2 to user 1</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Row>\n            <Row>\n\n            </Row>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}